body {
  background-color: black;
}

/* フィールド全体の配置 */
.gameContainer {
  margin-top: 5vw;
  display: flex;
  justify-content: space-around;
}

.gameArea {
  display: flex;
}

#playerGameArea {
  margin-left: 10vw;
}

#opponentGameArea {
  margin-right: 15vw;
}

/* 各フィールドと入力領域を縦に並べる */
.fieldContainer {
  display: flex;
  flex-direction: column;
  align-items: center;
  /* 中央揃え */
}

/* フィールドと入力領域のキャンバススタイル */
canvas {}

.field-wrapper {
  position: relative;
}

/* フィールドキャンバス */
.field {
  background-color: #000000;
  /* background-color: #333; */
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
  /* キャンバスの影 */
  border: 2px solid rgba(255, 255, 255, 0.5);
  border-top: none;
  /* z-index: 2; */
  position: relative;
}

/* 入力領域キャンバス */
.inputField {
  margin-top: 4vh;
  /* background-color: #222; 入力領域の背景色を少し明るいダークグレーに設定 */
  background-color: #000000;
  border-top: 2px solid #444;
  /* 境界線 */
  border-bottom: 2px solid #444;/
}

.statusField {
  border-left: 2px solid rgba(255, 255, 255, 0.5);
  border-top: 2px solid rgba(255, 255, 255, 0.5);
  border-bottom: 2px solid rgba(255, 255, 255, 0.5);
  /* margin-right: 1px; */
}

/* 既存のCSSはそのままで、以下を追加 */

/* プログレスバーのコンテナ */
#intervalProgressBar {
  position: absolute;
  bottom: -30px;
  /* 入力フィールドの下に配置 */
  left: 50%;
  transform: translateX(-50%);
  width: 80%;
  /* gameContainerの80%の幅 */
  height: 3px;
  /* バーの高さを少し太めに */
  background-color: rgba(255, 255, 255, 0.1);
  /* 薄い背景 */
  border-radius: 1.5px;
  /* 少し角を丸く */
  overflow: hidden;
  /* はみ出した部分を隠す */
}

/* プログレスライン */
#progressLine {
  width: 100%;
  height: 100%;
  background-color: rgba(255, 255, 255, 0.8);
  /* やや透明な白 */
  transition: width 0.1s linear;
  box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
  /* 光っているような効果 */
}

/* gameContainerのposition調整 */
.gameContainer {
  position: relative;
  /* プログレスバーの配置の基準点 */
  /* padding-bottom: 40px; */
  /* プログレスバー用の余白 */
}

/* プログレスバーのコンテナ */
#intervalProgressBar {
  position: absolute;
  bottom: -4vh;
  left: 55vw;
  transform: translateX(-50%);
  width: 65vw;
  height: 3px;
  background-color: rgba(255, 255, 255, 0.1);
  border-radius: 1.5px;
  overflow: hidden;
}

/* 左側のプログレスライン */
#progressLineLeft {
  position: absolute;
  left: 0;
  width: 50%;
  height: 100%;
  background-color: rgba(255, 255, 255, 0.8);
  box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
  transform-origin: right center;
  transform: scaleX(1);
}

/* 右側のプログレスライン */
#progressLineRight {
  position: absolute;
  right: 0;
  width: 50%;
  height: 100%;
  background-color: rgba(255, 255, 255, 0.8);
  box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
  transform-origin: left center;
  transform: scaleX(1);
}

/* アニメーション用クラス */
.animating {
  transition: transform 0.1s linear;
}

:root {
  --base-size: 5vh; /* 基準サイズ */
}


.sideWrapper {
  display: flex;
  flex-direction: column;
  width: 16vw;
  font-family: 'M PLUS Rounded 1c';
}

.nextFieldWrapper {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: flex-end;
  /* padding-bottom: 10vw; */
  height: 50%;
  width: auto;
  /* margin-right: 0.2vw; */
}

.nextText {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 2vh;
  width: 100%;
  background-color: rgb(255, 255, 255, 0.8);
  border-right: 0.2vw solid rgba(255, 255, 255, 0.25);
  border-left: 0.2vw solid rgba(255, 255, 255, 0.5);
  color: rgb(0, 0, 0);
  font-size: 0.8vw;
  font-weight: bold;
}

.next {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 3.8vh;
  width: 60%;
  text-align: right;
  font-size: 0.8vw;
  color: rgba(255, 255, 255, 0.7);
  /* border-right: 0.1vw solid rgba(255, 255, 255, 0.5); */
  border-left: 0.1vw solid rgba(255, 255, 255, 0.5);
}

.next1 {
  height: 7vh;
  width: 100%;
  font-size: 1.5vw;
  /* text-wrap: nowrap; */
  color: rgba(255, 255, 255, 0.8);
  border: 0.2vw solid rgba(255, 255, 255, 0.8);
  font-weight: 500;
  border-bottom-left-radius: 5% 22.5%;
}

.next5 {
  border-bottom: 0.1vw solid rgba(255, 255, 255, 0.5);
  border-bottom-left-radius: 5% 22.5%;
}

.attackInfoWrapper {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  justify-content: flex-end;
  justify-content: center;
  width: auto;
  margin-right: 0.5vw;
  color: rgba(255, 255, 255, 0.8);
}

.attackInfo {
  background-color: #00000000;
  color: rgba(255, 255, 255, 0.5);
  height: 5vh;

  font-family: 'M PLUS Rounded 1c';
  text-align: right;
  z-index: 100;
}

.attackKind {
  display: flex;
  justify-content: center;
  font-size: 3vh;
  color: rgb(255, 80, 80, 0.8);
  animation: popAndFade 1.3s ease-in-out forwards;
  font-weight: bolder;
}

.chainBonus {
  display: flex;
  justify-content: center;
  width: 5vw;
  font-size: 2.5vh;
  color: rgba(180, 140, 30, 0.8);
  font-weight: bold;
}

.nerfValue {
  font-size: 2vh;
  color: rgb(180, 200, 255, 0.8);
}

/* AttackKind のアニメーション */
@keyframes popAndFade {
  0% {
    transform: scale(1);
    opacity: 1;
  }
  100% {
    transform: scale(2);
    opacity: 0;
  }
}

/* ChainBonus のアニメーション */
@keyframes bounceUp {
  0% {
    transform: scale(1);
    opacity: 0;
  }
  40% {
    transform: scale(1.4);
    opacity: 1;
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}

/* フェードアウト用の新しいアニメーション */
@keyframes fadeOut {
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}

.attackKind.animate {
  animation: popAndFade 1.3s ease-in-out forwards;
  -webkit-text-stroke: 2px black;
  paint-order: stroke;
}

.chainBonus.animate {
  animation: bounceUp 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

.nerfValue.animate {
  animation: bounceUp 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

.chainBonus.fade-out {
  animation: fadeOut 0.5s ease-out forwards;
}

.nerfValue.fade-out {
  animation: fadeOut 0.5s ease-out forwards;
}

/* アニメーションをリセットするためのクラス */
.reset-animation {
  animation: none !important;
}

.infoFieldWrapper {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  justify-content: flex-end;
  height: 50%;
  width: auto;
  margin-bottom: calc(var(--base-size) + 4vh);
  margin-right: 0.5vw;
}

.infoField {
  background-color: #000000;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
  color: rgba(255, 255, 255, 0.5);
  height: 3vh;
  width: 10vw;

  font-family: 'M PLUS Rounded 1c';
  font-size: 2.5vh;
  text-align: right;
}

.smallText {
  font-size: 1.5vh;
}

.infoFieldName {
  display: flex;
  flex-direction: column; /* 垂直方向に並べる */
  justify-content: flex-end; /* 内部のコンテンツを下揃え */
  height: 2.5vh;
  /* padding-top: 2.5vh; */
  margin-top: 1vh;

  font-size: 1.5vh;
  color: rgba(255, 255, 255, 0.5);
  position: relative; /* 親要素に対して相対位置を指定 */
  transform: translateY(0.8vh); /* 下方向に20px移動 */
}

@keyframes shake-horizontal {
  0%, 100% {
    transform: translateX(0);
  }
  50% {
    transform: translateX(calc(var(--shake-distance) * 1.5));
  }
}

.shake-horizontal {
  animation: shake-horizontal 0.2s ease-in-out;
}

@keyframes shake-vertical {
  0% {
    transform: translateY(0) scale(1); /* 初期状態 */
  }
  50% {
    transform: translateY(var(--shake-distance)) scale(calc(1 - var(--shake-scale) / 2)); /* 動的scale */
  }
  100% {
    transform: translateY(0) scale(1); /* 元の状態に戻る */
  }
}

.shake-vertical {
  animation: shake-vertical 0.12s ease-in-out;
}

@keyframes color-flash {
  0% {
    background-color: transparent;
  }
  50% {
    background-color: rgba(255, 0, 0, 0.5); /* 赤色のフラッシュ効果 */
  }
  100% {
    background-color: transparent;
  }
}

.flash-effect {
  animation: color-flash 0.3s ease-in-out;
}

@keyframes auraAnime {
  0% {
    transform: scale(.9);
    opacity: 1;
  }
  90% {
    opacity: .1;
  }
  to {
    transform: scale(1.5);
    opacity: 0;
  }
}

@keyframes auraAnimeAfter {
  0% {
    transform: scale(.9);
    opacity: 1;
  }
  90% {
    opacity: .1;
  }
  to {
    transform: scale(2);
    opacity: 0;
  }
}

/* 文字コンテナのスタイル */
.aura-container {
  position: relative;
  display: inline-block;
  transition: .2s;
  /* background: var(--aura-color);
  border-radius: 100%; */
}

/* オーラエフェクトの基本スタイル */
.aura-container:before,
.aura-container:after {
  content: "";
  position: absolute;
  z-index: -10;
  top: 12.5%;
  left: -2%;
  width: 100%;
  height: 75%;
  border-radius: 100%;
  background: var(--aura-color);
  border: 2px solid var(--aura-border-color);
}


/* 1つ目のオーラレイヤー */
.aura-container:before {
  animation: auraAnime 2s ease-out infinite;
}

.aura-container:after {
  animation: auraAnime2 2s ease-out infinite;
}

/* 文字自体のスタイル */
.character {
  position: relative;
  z-index: 1;
}


.field-aura-container {
  position: absolute;
  pointer-events: none;
}

.field-aura-container::before,
.field-aura-container::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 100%;
  background: var(--aura-color);
  border: 2px solid var(--aura-border-color);
}

.field-aura-container::before {
  animation: fieldAuraAnime 1.2s ease-out infinite;
}

.field-aura-container::after {
  animation: fieldAuraAnimeAfter 1.2s ease-out infinite;
}

@keyframes fieldAuraAnime {
  0% {
    transform: scale(.9);
    opacity: .7;
  }
  90% {
    opacity: .1;
  }
  to {
    transform: scale(1.5);
    opacity: 0;
  }
}

@keyframes fieldAuraAnimeAfter {
  0% {
    transform: scale(.9);
    opacity: .7;
  }
  90% {
    opacity: .1;
  }
  to {
    transform: scale(2);
    opacity: 0;
  }
}